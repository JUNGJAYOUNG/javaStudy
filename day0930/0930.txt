**git의 사용
1. 크롬 브라우저에서 "download git"을 검색하여 다운받아 설치
2. 토큰 사용하라고 에러뜨면 git token 생성이라고 구글에 검색하여 그대로 따라할것.
토큰 따로 메모장에 저장해둘 것.

-------------------
**오류의 종류
1.문법오류
  자바문법 규칙에 맞지 않는 오류이며, 컴파일이 되지 않는다.
  컴파일시에 오류 메세지를 출력해 준다.
  오류메세지에 따라 오류를 해결하고 다시 컴파일 해 준다.

2.논리오류
  자바문법은 올바르지만 논리적으로 문제해결을 잘못 판단하여 
  프로그램이 작성되어 원하는대로 동작하지 않는 오류
  이런 경우를 "버그"가 있다 라고 말하며 이러한 "버그"를 해결하는 과정을
  "디버깅"한다고 합니다.

3.실행오류
  자바문법도 올바르고 잘 실행되는 프로그램이지만
  사용자의 부주의로 인하여 예를 들어 정수를 입력해야하는 곳에서
  문자열을 입력하는 등 과 같은 사용자의 프로그램 사용 미숙 등으로
  인하여 발생하는 오류.이러한 경우에는 
  **예외처리를 통하여 문제를 해결할 수 있다. 

-----------------------------------

**이름 작성의 규칙
클래스 이름이나 변수이름이나 메소드이름을 정해 줄 때에는 
가능하면 의미있는 이름으로 정해준다.

이러한 이름을 정해 줄 때는 가능하면 의미있는 이름으로
사용자가 임의로 정해 줄 수 있다.

그러나 다음의 내용은 반드시 지켜야한다.
- 클래스이름이나 변수이름이나 메소드이름의 첫글자는 영문
  이거나 _기호 이거나 $기호만 사용가능.
  특별한 경우가 아니면 기호는 사용하지 않음.
  **영문으로 시작하도록 한다.(숫자로 시작xx)

  또, 클래스 이름의 첫글자는 대문자로 시작한다.
  변수이름이나 메소드이름의 첫글자는 소문자로 시작하도록 한다.

  클래스이름이나 변수이름 메소드이름을 의미있는 이름으로 정해
  주다보면 두개의 단어이상을 합쳐야 하는 경우가 있는데
  이때에는 두번째 단어 이후에 시작하는 각 단어의 첫글자를 
  대문자로 써서 읽기가 쉽도록 한다.
  예를 들어 변수
        myAge 처럼 사용한다.

  
- 클래스이름이 변수이름이나 메소드이름에는 
  공백문자를 포함할 수 없다.
  my age 이러한 변수를 만들 수 없다.
  (폴더를 만들때에도 가급적이면 공백문자를 사용x)

 -------------------------------
 **주석문
프로그램의 실행에 영향을 끼치지 않고 설명을 하기 위한 문장을 말함

한줄 주석
     //로 시작하면 거기서부터 그 줄 끝까지는 주석문으로 처리된다.
여러줄 주석
     /* */ 여러줄을 주석문으로 처리함.

주석문은 협업을 위한 다른 개발자나 미래의 후임자나 혹은 나 자신을 위해서도
설명문이 필요할 때에 사용한다.

또, 논리오류를 제거하기 위한 디버깅을 할 때에도
의심되는 코드를 주석문으로 처리해가면서 활용할 수 있다. 

--------------------------------------------
**제어문
프로그램의 흐름을 제어하는 문장들을 말함.

1. 선택문
2. 반복문
3. break, continue

---------------------------------------
프로그램의 흐름에 따라 혹은 상황에 따라
실행시키고자 하는 문장을 선택하기 위한 문장을 말함.

1.if문
2.switch case문

-----------------------------------------
**if문
조건식에 따라 실행시키고자 하는 문장을 선택할 때에 사용함.
조건식이 참일때 실행할 문장과 거짓일 때 실행할 문장이 서로 
달라지게 사용할 수도 있고, 
조건식이 참인지만 판별할 수도 있고, 
여러가지 조건식을 차례로 판별하도록 다양하게 사용할 수 있다.

**if문을 사용하는 기본 형식

if( 조건식 )
    조건식이 참일때에 실행할 명령어;
else
    조건식이 거짓일때 실행할 명령어;

---------------------------
a;
b;
if( 조건식 )
   c;
else
   d;
e;
f;

위의 경우
a와 b를 순차적으로 실행한 다음
만약 조건식이 참이라면 c를 실행하고
그 다음 e와 f를 차례로 실행함.
a와 b를 순차적으로 실행한 다음
만약 조건식이 거짓이라면 else에 있는 d를 실행하고 
e와 f를 차례로 실행함.

즉, e와 f처럼 if문이 참이던 거짓이던 
수행하고자 하는 명령어들은
if문 바깥으로 표현하는 것이 좋다.

--------------------------------
a;
b;
if(조건식)
   c;
   d;
else
   e;
   f;
g;
h;
위의 코드는 만약 조건식이 참이라면 어떠한 문장을 실행할까요?
위의 코드는 오류가 발생함.

{}를 써줘야 한다.

a;
b;
if(조건식1){
   c;
}else if(조건식2){
   d;
}else if(조건식3){
   e;
}
f;
g;

위의 경우 a,b를 실행한 다음 먼저 조건식1을 판별,
조건식1이 참이면 c 실행하고 f,g실행.
조건식1이 거짓이면 조건식2를 판별,
조건식2가 참이면 d실행, f,g실행,
a,b 실행 후 조건식1을 판별했더니 거짓이라면 조건식2 판별,
그것도 거짓이라면 조건식3판별.
조건식3이 참이면 e실행, f,g 실행
모든 조건식이 거짓이라면 else부분의 k를 실행하고, f,g 실행.
위와 같이 판단해야 하는 경우의 수가 여러가지라면 
if, else if, else로 표현할 수 있다.

a;
b;
if(조건식1){
   if(조건식2){
      c;
   }else{
      d;
   }
}else{
   if(조건식3){
      e;
   }else{
      f;
   }
}
g;
h;

a,b를 실행한다음 조건식1을 먼저 판별.
이 조건식1이 참일 수도 있고 거짓일 수도 있음
만약 조건식1이 참이라면 
그 안에서 또 조건식2를 판별.
만약 조건식2도 참이라면 c실행, g,h실행.
만약 조건식1은 참인데 조건식2가 거짓이라면 d 실행, g,h
조건식1이 거짓이면 else에 있는 조건식3 판별.


